#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JWT —Å–µ–∫—Ä–µ—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/generate-secrets.js
 */

import { generateSecretsCLI, createSecureEnvFile, validateJWTSecret } from '../src/utils/jwtSecrets';
import fs from 'fs';
import path from 'path';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'generate':
    console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JWT —Å–µ–∫—Ä–µ—Ç–æ–≤...\n');
    generateSecretsCLI();
    break;
    
  case 'create-env':
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏...\n');
    
    const envContent = createSecureEnvFile();
    const envPath = path.join(process.cwd(), '.env.secrets');
    
    try {
      fs.writeFileSync(envPath, envContent);
      console.log(`‚úÖ –§–∞–π–ª .env.secrets —Å–æ–∑–¥–∞–Ω: ${envPath}`);
      console.log('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª');
      console.log('üö® –ù–ï –∫–æ–º–º–∏—Ç—å—Ç–µ .env.secrets –≤ Git!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      process.exit(1);
    }
    break;
    
  case 'validate':
    const secretToValidate = args[1];
    if (!secretToValidate) {
      console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: node scripts/generate-secrets.js validate YOUR_SECRET');
      process.exit(1);
    }
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã JWT —Å–µ–∫—Ä–µ—Ç–∞...\n');
    const validation = validateJWTSecret(secretToValidate);
    
    console.log(`–°–µ–∫—Ä–µ—Ç: ${secretToValidate}`);
    console.log(`–°–∏–ª–∞: ${validation.score}/100`);
    console.log(`–°—Ç–∞—Ç—É—Å: ${validation.isValid ? '‚úÖ –ë–µ–∑–æ–ø–∞—Å–µ–Ω' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}`);
    
    if (validation.issues.length > 0) {
      console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã:');
      validation.issues.forEach(issue => console.log(`  - ${issue}`));
    }
    
    if (validation.recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      validation.recommendations.forEach(rec => console.log(`  - ${rec}`));
    }
    break;
    
  case 'help':
  case '--help':
  case '-h':
    console.log(`
üîê –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JWT —Å–µ–∫—Ä–µ—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/generate-secrets.js <–∫–æ–º–∞–Ω–¥–∞> [–æ–ø—Ü–∏–∏]

–ö–æ–º–∞–Ω–¥—ã:
  generate          –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
  create-env        –°–æ–∑–¥–∞—Ç—å .env.secrets —Ñ–∞–π–ª —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
  validate <secret> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
  help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/generate-secrets.js generate
  node scripts/generate-secrets.js create-env
  node scripts/generate-secrets.js validate "my-secret-here"

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
  - –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã (–∫–∞–∂–¥—ã–µ 90 –¥–Ω–µ–π)
  - –ù–ï –∫–æ–º–º–∏—Ç—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ Git
  - –•—Ä–∞–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
`);
    break;
    
  default:
    console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: generate, create-env, validate, help');
    process.exit(1);
}
