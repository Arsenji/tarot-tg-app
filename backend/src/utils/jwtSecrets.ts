import crypto from 'crypto';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JWT —Å–µ–∫—Ä–µ—Ç–∞
export interface JWTSecretConfig {
  length: number;
  includeSpecialChars: boolean;
  includeNumbers: boolean;
  includeUppercase: boolean;
  includeLowercase: boolean;
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–µ–∫—Ä–µ—Ç–æ–≤
export const JWT_SECRET_CONFIGS = {
  // –û—Å–Ω–æ–≤–Ω–æ–π JWT —Å–µ–∫—Ä–µ—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  main: {
    length: 64,
    includeSpecialChars: true,
    includeNumbers: true,
    includeUppercase: true,
    includeLowercase: true
  },
  // –ê–¥–º–∏–Ω—Å–∫–∏–π JWT —Å–µ–∫—Ä–µ—Ç - –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
  admin: {
    length: 64,
    includeSpecialChars: true,
    includeNumbers: true,
    includeUppercase: true,
    includeLowercase: true
  },
  // CSRF —Å–µ–∫—Ä–µ—Ç - –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF –∞—Ç–∞–∫
  csrf: {
    length: 32,
    includeSpecialChars: true,
    includeNumbers: true,
    includeUppercase: true,
    includeLowercase: true
  },
  // –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π
  session: {
    length: 48,
    includeSpecialChars: true,
    includeNumbers: true,
    includeUppercase: true,
    includeLowercase: true
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
export const generateJWTSecret = (config: JWTSecretConfig): string => {
  const {
    length,
    includeSpecialChars,
    includeNumbers,
    includeUppercase,
    includeLowercase
  } = config;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
  let charset = '';
  
  if (includeLowercase) {
    charset += 'abcdefghijklmnopqrstuvwxyz';
  }
  
  if (includeUppercase) {
    charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  }
  
  if (includeNumbers) {
    charset += '0123456789';
  }
  
  if (includeSpecialChars) {
    charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';
  }

  if (charset.length === 0) {
    throw new Error('At least one character type must be included');
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Å–µ–∫—Ä–µ—Ç
  const randomBytes = crypto.randomBytes(length);
  let secret = '';
  
  for (let i = 0; i < length; i++) {
    const randomIndex = randomBytes[i] % charset.length;
    secret += charset[randomIndex];
  }

  return secret;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const generateEnvironmentSecret = (type: keyof typeof JWT_SECRET_CONFIGS): string => {
  const config = JWT_SECRET_CONFIGS[type];
  return generateJWTSecret(config);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
export const validateJWTSecret = (secret: string): {
  isValid: boolean;
  score: number;
  issues: string[];
  recommendations: string[];
} => {
  const issues: string[] = [];
  const recommendations: string[] = [];
  let score = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
  if (secret.length < 32) {
    issues.push('Secret is too short (minimum 32 characters)');
    score -= 20;
  } else if (secret.length >= 64) {
    score += 20;
  } else {
    score += 10;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  const hasLowercase = /[a-z]/.test(secret);
  const hasUppercase = /[A-Z]/.test(secret);
  const hasNumbers = /[0-9]/.test(secret);
  const hasSpecialChars = /[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(secret);

  if (!hasLowercase) {
    issues.push('Missing lowercase letters');
    score -= 5;
  } else {
    score += 5;
  }

  if (!hasUppercase) {
    issues.push('Missing uppercase letters');
    score -= 5;
  } else {
    score += 5;
  }

  if (!hasNumbers) {
    issues.push('Missing numbers');
    score -= 5;
  } else {
    score += 5;
  }

  if (!hasSpecialChars) {
    issues.push('Missing special characters');
    score -= 10;
  } else {
    score += 10;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const weakPatterns = [
    'password',
    'secret',
    'jwt',
    'token',
    'key',
    'admin',
    'user',
    '123456',
    'qwerty',
    'abcdef',
    'your-super-secret',
    'change-me',
    'fallback'
  ];

  const lowerSecret = secret.toLowerCase();
  for (const pattern of weakPatterns) {
    if (lowerSecret.includes(pattern)) {
      issues.push(`Contains weak pattern: ${pattern}`);
      score -= 15;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
  const repeatedChars = /(.)\1{3,}/.test(secret);
  if (repeatedChars) {
    issues.push('Contains repeated characters');
    score -= 10;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const sequences = /(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz)/i.test(secret);
  if (sequences) {
    issues.push('Contains sequential characters');
    score -= 10;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é
  const uniqueChars = new Set(secret).size;
  const entropy = uniqueChars / secret.length;
  
  if (entropy < 0.5) {
    issues.push('Low character diversity');
    score -= 10;
  } else if (entropy > 0.8) {
    score += 10;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (score < 50) {
    recommendations.push('Generate a new, stronger secret');
  }
  
  if (secret.length < 64) {
    recommendations.push('Use at least 64 characters');
  }
  
  if (!hasSpecialChars) {
    recommendations.push('Include special characters');
  }
  
  if (issues.length > 0) {
    recommendations.push('Avoid predictable patterns and sequences');
  }

  return {
    isValid: score >= 70 && issues.length === 0,
    score: Math.max(0, Math.min(100, score)),
    issues,
    recommendations
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
export const generateAllSecrets = (): Record<string, string> => {
  return {
    JWT_SECRET: generateEnvironmentSecret('main'),
    ADMIN_JWT_SECRET: generateEnvironmentSecret('admin'),
    CSRF_SECRET: generateEnvironmentSecret('csrf'),
    SESSION_SECRET: generateEnvironmentSecret('session')
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
export const createSecureEnvFile = (): string => {
  const secrets = generateAllSecrets();
  
  return `# ===========================================
# üîê –ë–ï–ó–û–ü–ê–°–ù–´–ï JWT –°–ï–ö–†–ï–¢–´
# ===========================================
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${new Date().toISOString()}
# –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï –ö–û–ú–ú–ò–¢–¨–¢–ï –≠–¢–û–¢ –§–ê–ô–õ –í GIT!

# –û—Å–Ω–æ–≤–Ω–æ–π JWT —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
JWT_SECRET=${secrets.JWT_SECRET}

# –ê–¥–º–∏–Ω—Å–∫–∏–π JWT —Å–µ–∫—Ä–µ—Ç (–æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
ADMIN_JWT_SECRET=${secrets.ADMIN_JWT_SECRET}

# CSRF —Å–µ–∫—Ä–µ—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫
CSRF_SECRET=${secrets.CSRF_SECRET}

# –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π
SESSION_SECRET=${secrets.SESSION_SECRET}

# ===========================================
# üìù –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# ===========================================

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
# ‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã (–∫–∞–∂–¥—ã–µ 90 –¥–Ω–µ–π)
# ‚úÖ –•—Ä–∞–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
# ‚úÖ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
# ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
# ‚úÖ –õ–æ–≥–∏—Ä—É–π—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

# ===========================================
# üîç –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–û–í
# ===========================================

# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—ã —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
# node -e "const { validateJWTSecret } = require('./src/utils/jwtSecrets'); console.log(validateJWTSecret('YOUR_SECRET_HERE'));"
`;
};

// CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
export const generateSecretsCLI = (): void => {
  console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JWT —Å–µ–∫—Ä–µ—Ç–æ–≤...\n');
  
  const secrets = generateAllSecrets();
  
  console.log('üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:');
  console.log('=====================================');
  
  for (const [name, secret] of Object.entries(secrets)) {
    const validation = validateJWTSecret(secret);
    console.log(`${name}:`);
    console.log(`  –°–µ–∫—Ä–µ—Ç: ${secret}`);
    console.log(`  –°–∏–ª–∞: ${validation.score}/100`);
    console.log(`  –°—Ç–∞—Ç—É—Å: ${validation.isValid ? '‚úÖ –ë–µ–∑–æ–ø–∞—Å–µ–Ω' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}`);
    if (validation.issues.length > 0) {
      console.log(`  –ü—Ä–æ–±–ª–µ–º—ã: ${validation.issues.join(', ')}`);
    }
    console.log('');
  }
  
  console.log('üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('=====================================');
  console.log('1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ');
  console.log('2. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –≤–∞—à .env —Ñ–∞–π–ª');
  console.log('3. –ù–ï –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª –≤ Git');
  console.log('4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π');
  console.log('5. –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã');
  console.log('');
  
  console.log('üö® –í–ê–ñ–ù–û: –≠—Ç–∏ —Å–µ–∫—Ä–µ—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!');
  console.log('–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.');
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  generateJWTSecret,
  generateEnvironmentSecret,
  validateJWTSecret,
  generateAllSecrets,
  createSecureEnvFile,
  generateSecretsCLI,
  JWT_SECRET_CONFIGS
};
