import { Telegraf, Context, Markup } from 'telegraf';
import mongoose from 'mongoose';
import { connectDB } from '../utils/database';
import { User } from '../models/User';
import { SupportMessage } from '../models/SupportMessage';
import { Review } from '../models/Review';
import { checkSubscriptionStatus } from '../utils/subscription';
import logger from '../utils/logger';
import { YooKassaService, SUBSCRIPTION_PLANS } from '../services/yookassa';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserState {
  waitingForHelp?: boolean;
  waitingForReview?: boolean;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const userStates: Map<number, UserState> = new Map();

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const ADMIN_ID = process.env.ADMIN_TELEGRAM_ID || '';

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
let bot: Telegraf;
let isBotRunning = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è YooKassa (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ startBot)
let yooKassa: YooKassaService;

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const getMainKeyboard = () => {
  return Markup.keyboard([
    ['–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'],
    ['–ü–æ–º–æ—â—å', '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
  ]).resize();
};

const getStartKeyboard = () => {
  return Markup.keyboard([['–ù–∞—á–∞—Ç—å']]).resize();
};

const getSubscriptionKeyboard = () => {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        `${SUBSCRIPTION_PLANS.weekly.name} - ${SUBSCRIPTION_PLANS.weekly.price}‚ÇΩ`,
        'plan_weekly'
      )
    ],
    [
      Markup.button.callback(
        `${SUBSCRIPTION_PLANS.monthly.name} - ${SUBSCRIPTION_PLANS.monthly.price}‚ÇΩ`,
        'plan_monthly'
      )
    ],
    [
      Markup.button.callback(
        `${SUBSCRIPTION_PLANS.quarterly.name} - ${SUBSCRIPTION_PLANS.quarterly.price}‚ÇΩ`,
        'plan_quarterly'
      )
    ],
    [
      Markup.button.callback(
        `${SUBSCRIPTION_PLANS.yearly.name} - ${SUBSCRIPTION_PLANS.yearly.price}‚ÇΩ`,
        'plan_yearly'
      )
    ]
  ]);
};

const getBackKeyboard = () => {
  return Markup.keyboard([['–ù–∞–∑–∞–¥']]).resize();
};

const getOpenKeyboard = () => {
  return Markup.keyboard([['–û—Ç–∫—Ä—ã—Ç—å']]).resize();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
const initializeBot = () => {
  if (!bot) return;

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.use((ctx, next) => {
    let message = '';
    if (ctx.message && 'text' in ctx.message) {
      message = ctx.message.text;
    } else if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
      message = ctx.callbackQuery.data;
    }
    
    logger.info('Telegram Bot Request', {
      userId: ctx.from?.id,
      username: ctx.from?.username,
      message,
      type: ctx.updateType
    });
    return next();
  });

  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.start(async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await User.findOneAndUpdate(
        { telegramId: userId },
        {
          telegramId: userId,
          firstName: ctx.from?.first_name || '',
          lastName: ctx.from?.last_name || '',
          username: ctx.from?.username || '',
          languageCode: ctx.from?.language_code || 'ru',
          subscriptionStatus: 0,
          freeYesNoUsed: false
        },
        { upsert: true, new: true }
      );

      await ctx.reply(
        'üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞—Ä–æ-–±–æ—Ç!\n\n' +
        '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n' +
        '–ú–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –±—ã–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω –æ–ø—ã—Ç–Ω—ã–º–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–æ –∏ –Ω–∏—á–µ–º –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n' +
        '‚ú® –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –±–æ—Ç?\n\n' +
        '–í–∞—à–∏ —Ç–∞–π–Ω—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω—ã.\n\n' +
        '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n\n' +
        '–û—Ç–≤–µ—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n' +
        'üéÅ –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ:\n\n' +
        'üÉè ¬´–°–æ–≤–µ—Ç –¥–Ω—è¬ª ‚Äî 1 —Ä–∞–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n' +
        '‚ùì 1 –≤–æ–ø—Ä–æ—Å ¬´–î–∞ / –ù–µ—Ç¬ª\n\n' +
        'üîÆ 1 —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ.',
        getStartKeyboard()
      );
    } catch (error) {
      logger.error('Error in /start command', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
  bot.hears('–ù–∞—á–∞—Ç—å', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      const user = await User.findOne({ telegramId: userId });
      if (!user) {
        await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      await ctx.reply(
        'üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ.',
        getOpenKeyboard()
      );
    } catch (error) {
      logger.error('Error in "–ù–∞—á–∞—Ç—å" handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å"
  bot.hears('–û—Ç–∫—Ä—ã—Ç—å', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      const user = await User.findOne({ telegramId: userId });
      if (!user) {
        await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      const subscriptionInfo = checkSubscriptionStatus(user);

      let message = 'üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.\n\n';
      
      if (subscriptionInfo.hasSubscription) {
        message += '‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!\n\n';
      } else {
        message += 'üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n';
        message += '‚Ä¢ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ "–î–∞/–ù–µ—Ç" (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 1 —Ä–∞–∑)\n';
        message += '‚Ä¢ –°–æ–≤–µ—Ç –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n';
        message += '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)\n\n';
        message += 'üíé –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!';
      }

      message += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

      await ctx.reply(message, getMainKeyboard());
    } catch (error) {
      logger.error('Error in "–û—Ç–∫—Ä—ã—Ç—å" handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
  bot.hears('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      const user = await User.findOne({ telegramId: userId });
      if (!user) {
        await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      const subscriptionInfo = checkSubscriptionStatus(user);

      if (subscriptionInfo.hasSubscription) {
        await ctx.reply(
          '‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
          getMainKeyboard()
        );
        return;
      }

      let message = 'üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n';
      
      Object.values(SUBSCRIPTION_PLANS).forEach(plan => {
        message += `üì¶ ${plan.name}\n`;
        message += `üí∞ ${plan.price}‚ÇΩ\n`;
        message += `üìÖ ${plan.duration} –¥–Ω–µ–π\n`;
        message += `üìù ${plan.description}\n\n`;
      });

      message += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:';

      await ctx.reply(message, getSubscriptionKeyboard());
    } catch (error) {
      logger.error('Error in "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
  bot.action(/^plan_(weekly|monthly|quarterly|yearly)$/, async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      const callbackData = ctx.callbackQuery && 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : '';
      const match = callbackData.match(/^plan_(weekly|monthly|quarterly|yearly)$/);
      if (!match) return;
      
      const planType = match[1] as 'weekly' | 'monthly' | 'quarterly' | 'yearly';
      const plan = SUBSCRIPTION_PLANS[planType];

      const user = await User.findOne({ telegramId: userId });
      if (!user) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –Æ–∫–∞—Å—Å–∞
      const isYooKassaConfigured = process.env.YOOKASSA_SHOP_ID && 
        process.env.YOOKASSA_SHOP_ID !== 'your_yookassa_shop_id' &&
        process.env.YOOKASSA_SHOP_ID !== 'test_shop_id' &&
        process.env.YOOKASSA_SECRET_KEY && 
        process.env.YOOKASSA_SECRET_KEY !== 'your_yookassa_secret_key' &&
        process.env.YOOKASSA_SECRET_KEY !== 'test_secret_key';

      if (!isYooKassaConfigured) {
        // –î–µ–º–æ-—Ä–µ–∂–∏–º: —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const now = new Date();
        let expiryDate: Date;
        
        if (user.subscriptionStatus === 1 && user.subscriptionExpiry && user.subscriptionExpiry > now) {
          // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º (—Å—É–º–º–∏—Ä—É–µ–º —Å—Ä–æ–∫–∏)
          expiryDate = new Date(user.subscriptionExpiry.getTime() + (plan.duration * 24 * 60 * 60 * 1000));
        } else {
          // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          expiryDate = new Date(now.getTime() + (plan.duration * 24 * 60 * 60 * 1000));
          user.subscriptionActivatedAt = now;
        }

        const isRenewal = user.subscriptionStatus === 1 && user.subscriptionExpiry && user.subscriptionExpiry > now;
        
        user.subscriptionStatus = 1;
        user.subscriptionExpiry = expiryDate;
        await user.save();
        
        await ctx.answerCbQuery(isRenewal ? '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞! (–¢–µ—Å—Ç)' : '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! (–¢–µ—Å—Ç)');
        await ctx.editMessageText(
          `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ "${plan.name}" ${isRenewal ? '–ø—Ä–æ–¥–ª–µ–Ω–∞' : '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}!\n\n` +
          `üí∞ –°—É–º–º–∞: ${plan.price}‚ÇΩ\n` +
          `üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${plan.duration} –¥–Ω–µ–π\n` +
          `üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiryDate.toLocaleDateString('ru-RU')}\n\n` +
          `üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!\n\n` +
          `üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω.`,
          Markup.inlineKeyboard([
            [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'back_to_menu')]
          ])
        );

        logger.info('Test subscription activated', {
          userId,
          planType,
          amount: plan.price,
          expiryDate: expiryDate.toISOString()
        });

        return;
      }

      // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –Æ–∫–∞—Å—Å–æ–π
      try {
        const returnUrl = `${process.env.FRONTEND_URL}/payment/success`;
        const payment = await yooKassa.createPayment(
          plan.price,
          `–ü–æ–¥–ø–∏—Å–∫–∞ "${plan.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
          userId.toString(),
          planType,
          returnUrl
        );

        await ctx.answerCbQuery('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É...');
        await ctx.editMessageText(
          `üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${plan.name}"\n\n` +
          `üí∞ –°—É–º–º–∞: ${plan.price}‚ÇΩ\n` +
          `üìÖ –°—Ä–æ–∫: ${plan.duration} –¥–Ω–µ–π\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:`,
          Markup.inlineKeyboard([
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', payment.confirmation.confirmation_url)],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment')]
          ])
        );

        logger.info('Payment created', {
          userId,
          planType,
          paymentId: payment.id,
          amount: plan.price
        });

      } catch (paymentError) {
        logger.error('Payment creation failed', { error: paymentError, userId });
        
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
        await ctx.editMessageText(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞\n\n` +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
          Markup.inlineKeyboard([
            [Markup.button.callback('–ù–∞–∑–∞–¥', 'back_to_menu')]
          ])
        );
      }

    } catch (error) {
      logger.error('Error in plan selection', { error, userId: ctx.from?.id });
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
  bot.hears('–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      const user = await User.findOne({ telegramId: userId });
      if (!user) {
        await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      const subscriptionInfo = checkSubscriptionStatus(user);

      if (!subscriptionInfo.hasSubscription) {
        await ctx.reply(
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n' +
          '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.',
          Markup.inlineKeyboard([
            [Markup.button.callback('–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'buy_subscription')]
          ])
        );
        return;
      }

      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥–Ω–µ–π
      const now = new Date();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      const activationDate = user.subscriptionActivatedAt || now;
      
      const daysLeft = user.subscriptionExpiry ? 
        Math.max(0, Math.ceil((user.subscriptionExpiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))) : 
        0;

      const message = 
        `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:\n\n` +
        `‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n` +
        `üìÖ –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${activationDate.toLocaleDateString('ru-RU')}\n` +
        `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n` +
        `üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${user.subscriptionExpiry?.toLocaleDateString('ru-RU')}\n\n` +
        `üéâ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!`;

      await ctx.reply(
        message,
        Markup.inlineKeyboard([
          [Markup.button.callback('–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription')]
        ])
      );
    } catch (error) {
      logger.error('Error in "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞" handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
  bot.hears('–ü–æ–º–æ—â—å', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      userStates.set(userId, { waitingForHelp: true });

      await ctx.reply(
        'üÜò –ü–æ–º–æ—â—å\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π –∏ –æ–ø–∏—à–∏—Ç–µ –µ—ë.\n' +
        '–í –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤–∞–º —Å –ø–æ–º–æ—â—å—é!\n\n' +
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
        getBackKeyboard()
      );
    } catch (error) {
      logger.error('Error in "–ü–æ–º–æ—â—å" handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
  bot.hears('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) return;

      userStates.set(userId, { waitingForReview: true });

      await ctx.reply(
        '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n' +
        '–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n' +
        '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, —á—Ç–æ–±—ã –≤—ã –±—ã–ª–∏ –¥–æ–≤–æ–ª—å–Ω—ã.\n\n' +
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:',
        getBackKeyboard()
      );
    } catch (error) {
      logger.error('Error in "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : undefined;
      
      if (!userId || !messageText) return;

      const userState = userStates.get(userId);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (messageText === '–ù–∞–∑–∞–¥') {
        userStates.delete(userId);
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainKeyboard());
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
      if (userState?.waitingForHelp) {
        userStates.delete(userId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          await SupportMessage.create({
            userId: userId.toString(),
            telegramId: userId,
            userName: `${ctx.from?.first_name} ${ctx.from?.last_name || ''}`.trim(),
            userUsername: ctx.from?.username || '',
            message: messageText,
            createdAt: new Date(),
            updatedAt: new Date()
          });
        } catch (dbError) {
          logger.error('Error saving support message to database', { error: dbError, userId });
        }
        
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if (ADMIN_ID) {
          await ctx.telegram.sendMessage(
            ADMIN_ID,
            `üÜò –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from?.username || ctx.from?.first_name}\n` +
            `üÜî ID: ${userId}\n` +
            `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}`
          );
        }

        await ctx.reply(
          '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n' +
          '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          getMainKeyboard()
        );
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
      if (userState?.waitingForReview) {
        userStates.delete(userId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          await Review.create({
            userId: userId.toString(),
            telegramId: userId,
            userName: `${ctx.from?.first_name} ${ctx.from?.last_name || ''}`.trim(),
            userUsername: ctx.from?.username || '',
            review: messageText,
            rating: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            createdAt: new Date(),
            updatedAt: new Date()
          });
        } catch (dbError) {
          logger.error('Error saving review to database', { error: dbError, userId });
        }

        await ctx.reply(
          'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—ë–º—Å—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é!',
          getMainKeyboard()
        );
        return;
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainKeyboard());
    } catch (error) {
      logger.error('Error in text message handler', { error, userId: ctx.from?.id });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  bot.action('back_to_menu', async (ctx: Context) => {
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainKeyboard());
  });

  bot.action('buy_subscription', async (ctx: Context) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    await ctx.editMessageText('üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:', getSubscriptionKeyboard());
  });

  bot.action('cancel_payment', async (ctx: Context) => {
    await ctx.editMessageText('‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainKeyboard());
  });

  bot.action('extend_subscription', async (ctx: Context) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    await ctx.editMessageText('üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:', getSubscriptionKeyboard());
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err: any, ctx: Context) => {
    logger.error('Bot error', { error: err, userId: ctx.from?.id });
  });
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —É–∂–µ
    if (isBotRunning) {
      logger.warn('Bot is already running, skipping startup');
      return;
    }

    logger.info('Bot startup - checking environment', {
      hasToken: !!process.env.TELEGRAM_BOT_TOKEN,
      tokenLength: process.env.TELEGRAM_BOT_TOKEN?.length || 0,
      tokenStart: process.env.TELEGRAM_BOT_TOKEN?.substring(0, 10) || 'undefined'
    });

    if (!process.env.TELEGRAM_BOT_TOKEN) {
      logger.error('TELEGRAM_BOT_TOKEN is not set in environment variables');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Æ–∫–∞—Å—Å—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    yooKassa = new YooKassaService(
      process.env.YOOKASSA_SHOP_ID || '',
      process.env.YOOKASSA_SECRET_KEY || ''
    );

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (process.env.DISABLE_TELEGRAM_BOT === 'true') {
      logger.warn('Telegram Bot is disabled via DISABLE_TELEGRAM_BOT environment variable');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    initializeBot();

    await connectDB();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —É–∂–µ –ø–µ—Ä–µ–¥ launch
    if (isBotRunning) {
      logger.warn('Bot is already running, skipping launch');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    await bot.launch();
    isBotRunning = true;
    logger.info('ü§ñ Telegram Bot started successfully');
    
    // Graceful stop
    process.once('SIGINT', () => {
      if (isBotRunning) {
        bot.stop('SIGINT');
        isBotRunning = false;
      }
    });
    process.once('SIGTERM', () => {
      if (isBotRunning) {
        bot.stop('SIGTERM');
        isBotRunning = false;
      }
    });
  } catch (error) {
    logger.error('Failed to start bot', { error });
    isBotRunning = false;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if (error && typeof error === 'object' && 'response' in error) {
      const telegramError = error as any;
      if (telegramError.response?.error_code === 409) {
        logger.warn('Bot conflict detected - another instance is running');
        logger.warn('Continuing without Telegram Bot - API will work normally');
        return;
      }
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    logger.warn('Bot startup failed, but continuing without it');
    return;
  }
};

export { bot, startBot };